// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package storage

import (
	"errors"
	"fmt"
)

const (
	// ChoreStateINVALID is a ChoreState of type INVALID.
	ChoreStateINVALID ChoreState = iota
	// ChoreStateRUNNING is a ChoreState of type RUNNING.
	// backup running
	ChoreStateRUNNING
	// ChoreStateFAILED is a ChoreState of type FAILED.
	// backup failed
	ChoreStateFAILED
	// ChoreStateFINISHED is a ChoreState of type FINISHED.
	// backup finished
	ChoreStateFINISHED
	// ChoreStateACKED is a ChoreState of type ACKED.
	// backup acked
	ChoreStateACKED
)

var ErrInvalidChoreState = errors.New("not a valid ChoreState")

const _ChoreStateName = "INVALIDRUNNINGFAILEDFINISHEDACKED"

var _ChoreStateMap = map[ChoreState]string{
	ChoreStateINVALID:  _ChoreStateName[0:7],
	ChoreStateRUNNING:  _ChoreStateName[7:14],
	ChoreStateFAILED:   _ChoreStateName[14:20],
	ChoreStateFINISHED: _ChoreStateName[20:28],
	ChoreStateACKED:    _ChoreStateName[28:33],
}

// String implements the Stringer interface.
func (x ChoreState) String() string {
	if str, ok := _ChoreStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ChoreState(%d)", x)
}

var _ChoreStateValue = map[string]ChoreState{
	_ChoreStateName[0:7]:   ChoreStateINVALID,
	_ChoreStateName[7:14]:  ChoreStateRUNNING,
	_ChoreStateName[14:20]: ChoreStateFAILED,
	_ChoreStateName[20:28]: ChoreStateFINISHED,
	_ChoreStateName[28:33]: ChoreStateACKED,
}

// ParseChoreState attempts to convert a string to a ChoreState.
func ParseChoreState(name string) (ChoreState, error) {
	if x, ok := _ChoreStateValue[name]; ok {
		return x, nil
	}
	return ChoreState(0), fmt.Errorf("%s is %w", name, ErrInvalidChoreState)
}

// MarshalText implements the text marshaller method.
func (x ChoreState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ChoreState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseChoreState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
