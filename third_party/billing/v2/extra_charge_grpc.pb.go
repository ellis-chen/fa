// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v2/extra_charge.proto

package billingv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExtraBillServiceClient is the client API for ExtraBillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtraBillServiceClient interface {
	CheckExtraResource(ctx context.Context, in *CheckExtraResourceRequest, opts ...grpc.CallOption) (*CheckExtraResourceResponse, error)
	PutExtraCost(ctx context.Context, in *PutExtraCostRequest, opts ...grpc.CallOption) (*PutExtraCostResponse, error)
	ListExtraCost(ctx context.Context, in *ListExtraCostRequest, opts ...grpc.CallOption) (*ListExtraCostResponse, error)
	DeleteExtraCost(ctx context.Context, in *DeleteExtraCostRequest, opts ...grpc.CallOption) (*DeleteExtraCostResponse, error)
}

type extraBillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtraBillServiceClient(cc grpc.ClientConnInterface) ExtraBillServiceClient {
	return &extraBillServiceClient{cc}
}

func (c *extraBillServiceClient) CheckExtraResource(ctx context.Context, in *CheckExtraResourceRequest, opts ...grpc.CallOption) (*CheckExtraResourceResponse, error) {
	out := new(CheckExtraResourceResponse)
	err := c.cc.Invoke(ctx, "/billing.v2.ExtraBillService/CheckExtraResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extraBillServiceClient) PutExtraCost(ctx context.Context, in *PutExtraCostRequest, opts ...grpc.CallOption) (*PutExtraCostResponse, error) {
	out := new(PutExtraCostResponse)
	err := c.cc.Invoke(ctx, "/billing.v2.ExtraBillService/PutExtraCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extraBillServiceClient) ListExtraCost(ctx context.Context, in *ListExtraCostRequest, opts ...grpc.CallOption) (*ListExtraCostResponse, error) {
	out := new(ListExtraCostResponse)
	err := c.cc.Invoke(ctx, "/billing.v2.ExtraBillService/ListExtraCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extraBillServiceClient) DeleteExtraCost(ctx context.Context, in *DeleteExtraCostRequest, opts ...grpc.CallOption) (*DeleteExtraCostResponse, error) {
	out := new(DeleteExtraCostResponse)
	err := c.cc.Invoke(ctx, "/billing.v2.ExtraBillService/DeleteExtraCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtraBillServiceServer is the server API for ExtraBillService service.
// All implementations should embed UnimplementedExtraBillServiceServer
// for forward compatibility
type ExtraBillServiceServer interface {
	CheckExtraResource(context.Context, *CheckExtraResourceRequest) (*CheckExtraResourceResponse, error)
	PutExtraCost(context.Context, *PutExtraCostRequest) (*PutExtraCostResponse, error)
	ListExtraCost(context.Context, *ListExtraCostRequest) (*ListExtraCostResponse, error)
	DeleteExtraCost(context.Context, *DeleteExtraCostRequest) (*DeleteExtraCostResponse, error)
}

// UnimplementedExtraBillServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExtraBillServiceServer struct {
}

func (UnimplementedExtraBillServiceServer) CheckExtraResource(context.Context, *CheckExtraResourceRequest) (*CheckExtraResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExtraResource not implemented")
}
func (UnimplementedExtraBillServiceServer) PutExtraCost(context.Context, *PutExtraCostRequest) (*PutExtraCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutExtraCost not implemented")
}
func (UnimplementedExtraBillServiceServer) ListExtraCost(context.Context, *ListExtraCostRequest) (*ListExtraCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtraCost not implemented")
}
func (UnimplementedExtraBillServiceServer) DeleteExtraCost(context.Context, *DeleteExtraCostRequest) (*DeleteExtraCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtraCost not implemented")
}

// UnsafeExtraBillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtraBillServiceServer will
// result in compilation errors.
type UnsafeExtraBillServiceServer interface {
	mustEmbedUnimplementedExtraBillServiceServer()
}

func RegisterExtraBillServiceServer(s grpc.ServiceRegistrar, srv ExtraBillServiceServer) {
	s.RegisterService(&ExtraBillService_ServiceDesc, srv)
}

func _ExtraBillService_CheckExtraResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExtraResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraBillServiceServer).CheckExtraResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v2.ExtraBillService/CheckExtraResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraBillServiceServer).CheckExtraResource(ctx, req.(*CheckExtraResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtraBillService_PutExtraCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutExtraCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraBillServiceServer).PutExtraCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v2.ExtraBillService/PutExtraCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraBillServiceServer).PutExtraCost(ctx, req.(*PutExtraCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtraBillService_ListExtraCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExtraCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraBillServiceServer).ListExtraCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v2.ExtraBillService/ListExtraCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraBillServiceServer).ListExtraCost(ctx, req.(*ListExtraCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtraBillService_DeleteExtraCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtraCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtraBillServiceServer).DeleteExtraCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.v2.ExtraBillService/DeleteExtraCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtraBillServiceServer).DeleteExtraCost(ctx, req.(*DeleteExtraCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtraBillService_ServiceDesc is the grpc.ServiceDesc for ExtraBillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtraBillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.v2.ExtraBillService",
	HandlerType: (*ExtraBillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckExtraResource",
			Handler:    _ExtraBillService_CheckExtraResource_Handler,
		},
		{
			MethodName: "PutExtraCost",
			Handler:    _ExtraBillService_PutExtraCost_Handler,
		},
		{
			MethodName: "ListExtraCost",
			Handler:    _ExtraBillService_ListExtraCost_Handler,
		},
		{
			MethodName: "DeleteExtraCost",
			Handler:    _ExtraBillService_DeleteExtraCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/extra_charge.proto",
}
