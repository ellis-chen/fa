// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: v2/event.proto

package billingv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 计费事件状态变化
// vm: START -> STOP -> TERMINATE
// vm change model: START(original model) -> STOP(original model) -> START(target model) -> STOP(target model) -> TERMINATE(target model)
// storage: START -> TERMINATE
// storage expand size: 通过新增volume方式扩展存储
type EventType int32

const (
	EventType_EVENT_TYPE_INVALID EventType = 0
	// Deprecated: Do not use.
	EventType_EVENT_TYPE_CREATE    EventType = 1
	EventType_EVENT_TYPE_START     EventType = 2
	EventType_EVENT_TYPE_STOP      EventType = 3
	EventType_EVENT_TYPE_TERMINATE EventType = 4
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_INVALID",
		1: "EVENT_TYPE_CREATE",
		2: "EVENT_TYPE_START",
		3: "EVENT_TYPE_STOP",
		4: "EVENT_TYPE_TERMINATE",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_INVALID":   0,
		"EVENT_TYPE_CREATE":    1,
		"EVENT_TYPE_START":     2,
		"EVENT_TYPE_STOP":      3,
		"EVENT_TYPE_TERMINATE": 4,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_v2_event_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_v2_event_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{0}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_INVALID                    ResourceType = 0
	ResourceType_RESOURCE_TYPE_COMPUTE                    ResourceType = 1
	ResourceType_RESOURCE_TYPE_STORAGE                    ResourceType = 2
	ResourceType_RESOURCE_TYPE_STORAGE_EFS                ResourceType = 3
	ResourceType_RESOURCE_TYPE_TRANSFER                   ResourceType = 4
	ResourceType_RESOURCE_TYPE_IMAGE                      ResourceType = 5
	ResourceType_RESOURCE_TYPE_FASTSTOR_ESSENTIAL_COMPUTE ResourceType = 6
	ResourceType_RESOURCE_TYPE_FASTSTOR_ESSENTIAL_STORAGE ResourceType = 7
	ResourceType_RESOURCE_TYPE_BACKUP                     ResourceType = 8
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_INVALID",
		1: "RESOURCE_TYPE_COMPUTE",
		2: "RESOURCE_TYPE_STORAGE",
		3: "RESOURCE_TYPE_STORAGE_EFS",
		4: "RESOURCE_TYPE_TRANSFER",
		5: "RESOURCE_TYPE_IMAGE",
		6: "RESOURCE_TYPE_FASTSTOR_ESSENTIAL_COMPUTE",
		7: "RESOURCE_TYPE_FASTSTOR_ESSENTIAL_STORAGE",
		8: "RESOURCE_TYPE_BACKUP",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_INVALID":                    0,
		"RESOURCE_TYPE_COMPUTE":                    1,
		"RESOURCE_TYPE_STORAGE":                    2,
		"RESOURCE_TYPE_STORAGE_EFS":                3,
		"RESOURCE_TYPE_TRANSFER":                   4,
		"RESOURCE_TYPE_IMAGE":                      5,
		"RESOURCE_TYPE_FASTSTOR_ESSENTIAL_COMPUTE": 6,
		"RESOURCE_TYPE_FASTSTOR_ESSENTIAL_STORAGE": 7,
		"RESOURCE_TYPE_BACKUP":                     8,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_v2_event_proto_enumTypes[1].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_v2_event_proto_enumTypes[1]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{1}
}

type UnitType int32

const (
	UnitType_UNIT_TYPE_INVALID UnitType = 0
	UnitType_UNIT_TYPE_BYTE    UnitType = 1
	UnitType_UNIT_TYPE_KIB     UnitType = 2
	UnitType_UNIT_TYPE_MIB     UnitType = 3
	UnitType_UNIT_TYPE_GIB     UnitType = 4
	UnitType_UNIT_TYPE_TIB     UnitType = 5
)

// Enum value maps for UnitType.
var (
	UnitType_name = map[int32]string{
		0: "UNIT_TYPE_INVALID",
		1: "UNIT_TYPE_BYTE",
		2: "UNIT_TYPE_KIB",
		3: "UNIT_TYPE_MIB",
		4: "UNIT_TYPE_GIB",
		5: "UNIT_TYPE_TIB",
	}
	UnitType_value = map[string]int32{
		"UNIT_TYPE_INVALID": 0,
		"UNIT_TYPE_BYTE":    1,
		"UNIT_TYPE_KIB":     2,
		"UNIT_TYPE_MIB":     3,
		"UNIT_TYPE_GIB":     4,
		"UNIT_TYPE_TIB":     5,
	}
)

func (x UnitType) Enum() *UnitType {
	p := new(UnitType)
	*p = x
	return p
}

func (x UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_v2_event_proto_enumTypes[2].Descriptor()
}

func (UnitType) Type() protoreflect.EnumType {
	return &file_v2_event_proto_enumTypes[2]
}

func (x UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitType.Descriptor instead.
func (UnitType) EnumDescriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{2}
}

type FaststorEssentialType int32

const (
	FaststorEssentialType_FASTSTOR_ESSENTIAL_TYPE_INVALID          FaststorEssentialType = 0
	FaststorEssentialType_FASTSTOR_ESSENTIAL_TYPE_BASIC            FaststorEssentialType = 1
	FaststorEssentialType_FASTSTOR_ESSENTIAL_TYPE_HIGH_PERFORMANCE FaststorEssentialType = 2
)

// Enum value maps for FaststorEssentialType.
var (
	FaststorEssentialType_name = map[int32]string{
		0: "FASTSTOR_ESSENTIAL_TYPE_INVALID",
		1: "FASTSTOR_ESSENTIAL_TYPE_BASIC",
		2: "FASTSTOR_ESSENTIAL_TYPE_HIGH_PERFORMANCE",
	}
	FaststorEssentialType_value = map[string]int32{
		"FASTSTOR_ESSENTIAL_TYPE_INVALID":          0,
		"FASTSTOR_ESSENTIAL_TYPE_BASIC":            1,
		"FASTSTOR_ESSENTIAL_TYPE_HIGH_PERFORMANCE": 2,
	}
)

func (x FaststorEssentialType) Enum() *FaststorEssentialType {
	p := new(FaststorEssentialType)
	*p = x
	return p
}

func (x FaststorEssentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaststorEssentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_v2_event_proto_enumTypes[3].Descriptor()
}

func (FaststorEssentialType) Type() protoreflect.EnumType {
	return &file_v2_event_proto_enumTypes[3]
}

func (x FaststorEssentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaststorEssentialType.Descriptor instead.
func (FaststorEssentialType) EnumDescriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{3}
}

type PutEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType             ResourceType              `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=billing.v2.ResourceType" json:"resource_type,omitempty"`
	Vm                       *Vm                       `protobuf:"bytes,2,opt,name=vm,proto3" json:"vm,omitempty"`
	Storage                  *Storage                  `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	Image                    *Image                    `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Transfer                 *Transfer                 `protobuf:"bytes,5,opt,name=transfer,proto3" json:"transfer,omitempty"`
	Efs                      *Efs                      `protobuf:"bytes,6,opt,name=efs,proto3" json:"efs,omitempty"`
	FaststorEssentialVm      *FaststorEssentialVm      `protobuf:"bytes,7,opt,name=faststor_essential_vm,json=faststorEssentialVm,proto3" json:"faststor_essential_vm,omitempty"`
	FaststorEssentialStorage *FaststorEssentialStorage `protobuf:"bytes,8,opt,name=faststor_essential_storage,json=faststorEssentialStorage,proto3" json:"faststor_essential_storage,omitempty"`
	Backup                   *Backup                   `protobuf:"bytes,9,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (x *PutEventRequest) Reset() {
	*x = PutEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventRequest) ProtoMessage() {}

func (x *PutEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventRequest.ProtoReflect.Descriptor instead.
func (*PutEventRequest) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{0}
}

func (x *PutEventRequest) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_INVALID
}

func (x *PutEventRequest) GetVm() *Vm {
	if x != nil {
		return x.Vm
	}
	return nil
}

func (x *PutEventRequest) GetStorage() *Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *PutEventRequest) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *PutEventRequest) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *PutEventRequest) GetEfs() *Efs {
	if x != nil {
		return x.Efs
	}
	return nil
}

func (x *PutEventRequest) GetFaststorEssentialVm() *FaststorEssentialVm {
	if x != nil {
		return x.FaststorEssentialVm
	}
	return nil
}

func (x *PutEventRequest) GetFaststorEssentialStorage() *FaststorEssentialStorage {
	if x != nil {
		return x.FaststorEssentialStorage
	}
	return nil
}

func (x *PutEventRequest) GetBackup() *Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

type Vm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	EventType      EventType              `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=billing.v2.EventType" json:"event_type,omitempty"`
	ClusterId      string                 `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`                  // cs,集群id
	InstanceId     string                 `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`               // cs,实例id
	UserId         int32                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                          // global,用户id
	TenantId       int64                  `protobuf:"varint,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                    // global，租户id
	InstanceType   string                 `protobuf:"bytes,7,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`         // global,机型
	FsInstanceType string                 `protobuf:"bytes,8,opt,name=fs_instance_type,json=fsInstanceType,proto3" json:"fs_instance_type,omitempty"` // global,fs机型
	CloudAccount   string                 `protobuf:"bytes,9,opt,name=cloud_account,json=cloudAccount,proto3" json:"cloud_account,omitempty"`         // global,云账户
	Family         string                 `protobuf:"bytes,10,opt,name=family,proto3" json:"family,omitempty"`                                        // global,机型系列
	Lifecycle      string                 `protobuf:"bytes,11,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`                                  // global,计费模式
	NodeRole       string                 `protobuf:"bytes,12,opt,name=node_role,json=nodeRole,proto3" json:"node_role,omitempty"`                    // cs,节点类型
	Vendor         string                 `protobuf:"bytes,13,opt,name=vendor,proto3" json:"vendor,omitempty"`                                        // global,云供应商
	Region         string                 `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`                                        // global,区域
	Cpu            int32                  `protobuf:"varint,15,opt,name=cpu,proto3" json:"cpu,omitempty"`                                             // global
	Vcpu           int32                  `protobuf:"varint,16,opt,name=vcpu,proto3" json:"vcpu,omitempty"`                                           // global
	Gpu            int32                  `protobuf:"varint,17,opt,name=gpu,proto3" json:"gpu,omitempty"`                                             // global
	PublicIp       string                 `protobuf:"bytes,19,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`                    // 公网ip(可选)
	PrivateIp      string                 `protobuf:"bytes,20,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`                 // 私网ip(必填)
	EniIds         []string               `protobuf:"bytes,21,rep,name=eni_ids,json=eniIds,proto3" json:"eni_ids,omitempty"`
	Tags           map[string]string      `protobuf:"bytes,18,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SkuId          string                 `protobuf:"bytes,22,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"` //速石产品id(必填)
	EipId          string                 `protobuf:"bytes,23,opt,name=eip_id,json=eipId,proto3" json:"eip_id,omitempty"` //百度云弹性ip的Id(百度云必填，其他云可选)
}

func (x *Vm) Reset() {
	*x = Vm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vm) ProtoMessage() {}

func (x *Vm) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vm.ProtoReflect.Descriptor instead.
func (*Vm) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{1}
}

func (x *Vm) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Vm) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *Vm) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Vm) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Vm) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Vm) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *Vm) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *Vm) GetFsInstanceType() string {
	if x != nil {
		return x.FsInstanceType
	}
	return ""
}

func (x *Vm) GetCloudAccount() string {
	if x != nil {
		return x.CloudAccount
	}
	return ""
}

func (x *Vm) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *Vm) GetLifecycle() string {
	if x != nil {
		return x.Lifecycle
	}
	return ""
}

func (x *Vm) GetNodeRole() string {
	if x != nil {
		return x.NodeRole
	}
	return ""
}

func (x *Vm) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Vm) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Vm) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Vm) GetVcpu() int32 {
	if x != nil {
		return x.Vcpu
	}
	return 0
}

func (x *Vm) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *Vm) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *Vm) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *Vm) GetEniIds() []string {
	if x != nil {
		return x.EniIds
	}
	return nil
}

func (x *Vm) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Vm) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *Vm) GetEipId() string {
	if x != nil {
		return x.EipId
	}
	return ""
}

type Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	EventType    EventType              `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=billing.v2.EventType" json:"event_type,omitempty"`
	ClusterId    string                 `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`          // cs,集群id
	InstanceId   string                 `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`       // cs,实例id
	VolumeId     string                 `protobuf:"bytes,5,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`             // cs,数据卷id
	UserId       int32                  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // global,用户id
	TenantId     int64                  `protobuf:"varint,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`            // global,租户id
	Type         string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`                                     // global,数据卷类别
	CloudAccount string                 `protobuf:"bytes,9,opt,name=cloud_account,json=cloudAccount,proto3" json:"cloud_account,omitempty"` // global,云账户
	Size         int64                  `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`                                   // cs,磁盘大小
	Unit         string                 `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit,omitempty"`                                    // cs,数据单位
	Vendor       string                 `protobuf:"bytes,12,opt,name=vendor,proto3" json:"vendor,omitempty"`                                // global,云供应商
	Region       string                 `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`                                // global,区域
	Tags         map[string]string      `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Storage) Reset() {
	*x = Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{2}
}

func (x *Storage) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Storage) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *Storage) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Storage) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Storage) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *Storage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Storage) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *Storage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Storage) GetCloudAccount() string {
	if x != nil {
		return x.CloudAccount
	}
	return ""
}

func (x *Storage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Storage) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Storage) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Storage) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Storage) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type FaststorEssentialVm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                                       // (必填)
	EventType             EventType              `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=billing.v2.EventType" json:"event_type,omitempty"` // (必填)
	StorageId             string                 `protobuf:"bytes,3,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                            // ellis-chen storage id(必填)
	InstanceId            string                 `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                         // 实例id (必填)
	UserId                int32                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户id (必填)
	TenantId              int64                  `protobuf:"varint,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                              // 租户id (可选)
	InstanceType          string                 `protobuf:"bytes,7,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`                   // 机型  (必填)
	FsInstanceType        string                 `protobuf:"bytes,8,opt,name=fs_instance_type,json=fsInstanceType,proto3" json:"fs_instance_type,omitempty"`           // fs机型 (可选)
	CloudAccount          string                 `protobuf:"bytes,9,opt,name=cloud_account,json=cloudAccount,proto3" json:"cloud_account,omitempty"`                   // 云账户 (必填)
	Family                string                 `protobuf:"bytes,10,opt,name=family,proto3" json:"family,omitempty"`                                                  // 机型系列 (可选)
	Lifecycle             string                 `protobuf:"bytes,11,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`                                            // 计费模式 (必填)
	NodeRole              string                 `protobuf:"bytes,12,opt,name=node_role,json=nodeRole,proto3" json:"node_role,omitempty"`                              // 节点类型 (选填)
	Vendor                string                 `protobuf:"bytes,13,opt,name=vendor,proto3" json:"vendor,omitempty"`                                                  // 云供应商 (必填)
	Region                string                 `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`                                                  // 区域 (必填)
	Cpu                   int32                  `protobuf:"varint,15,opt,name=cpu,proto3" json:"cpu,omitempty"`                                                       // (选填)
	Vcpu                  int32                  `protobuf:"varint,16,opt,name=vcpu,proto3" json:"vcpu,omitempty"`                                                     // (必填)
	Gpu                   int32                  `protobuf:"varint,17,opt,name=gpu,proto3" json:"gpu,omitempty"`                                                       // (gpu机型必填)
	Tags                  map[string]string      `protobuf:"bytes,18,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FaststorEssentialType FaststorEssentialType  `protobuf:"varint,19,opt,name=faststor_essential_type,json=faststorEssentialType,proto3,enum=billing.v2.FaststorEssentialType" json:"faststor_essential_type,omitempty"` //基础版  高性能版 (必填)
	SkuId                 string                 `protobuf:"bytes,20,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`                                                                                          //速石产品id (必填)
}

func (x *FaststorEssentialVm) Reset() {
	*x = FaststorEssentialVm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaststorEssentialVm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaststorEssentialVm) ProtoMessage() {}

func (x *FaststorEssentialVm) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaststorEssentialVm.ProtoReflect.Descriptor instead.
func (*FaststorEssentialVm) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{3}
}

func (x *FaststorEssentialVm) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FaststorEssentialVm) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *FaststorEssentialVm) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *FaststorEssentialVm) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *FaststorEssentialVm) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FaststorEssentialVm) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *FaststorEssentialVm) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *FaststorEssentialVm) GetFsInstanceType() string {
	if x != nil {
		return x.FsInstanceType
	}
	return ""
}

func (x *FaststorEssentialVm) GetCloudAccount() string {
	if x != nil {
		return x.CloudAccount
	}
	return ""
}

func (x *FaststorEssentialVm) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *FaststorEssentialVm) GetLifecycle() string {
	if x != nil {
		return x.Lifecycle
	}
	return ""
}

func (x *FaststorEssentialVm) GetNodeRole() string {
	if x != nil {
		return x.NodeRole
	}
	return ""
}

func (x *FaststorEssentialVm) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *FaststorEssentialVm) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *FaststorEssentialVm) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *FaststorEssentialVm) GetVcpu() int32 {
	if x != nil {
		return x.Vcpu
	}
	return 0
}

func (x *FaststorEssentialVm) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *FaststorEssentialVm) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FaststorEssentialVm) GetFaststorEssentialType() FaststorEssentialType {
	if x != nil {
		return x.FaststorEssentialType
	}
	return FaststorEssentialType_FASTSTOR_ESSENTIAL_TYPE_INVALID
}

func (x *FaststorEssentialVm) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

type FaststorEssentialStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                                       // (必填)
	EventType             EventType              `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=billing.v2.EventType" json:"event_type,omitempty"` // (必填)
	StorageId             string                 `protobuf:"bytes,3,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                            // ellis-chen storage id (必填)
	InstanceId            string                 `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                         // 实例id (必填)
	VolumeId              string                 `protobuf:"bytes,5,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`                               // 数据卷id (必填)
	UserId                int32                  `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户id (必填)
	TenantId              int64                  `protobuf:"varint,7,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                              // 租户id (可选)
	Type                  string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`                                                       // 数据卷类别 (必填)
	CloudAccount          string                 `protobuf:"bytes,9,opt,name=cloud_account,json=cloudAccount,proto3" json:"cloud_account,omitempty"`                   // 云账户 (必填)
	Size                  int64                  `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`                                                     // 磁盘大小 (必填)
	Unit                  UnitType               `protobuf:"varint,11,opt,name=unit,proto3,enum=billing.v2.UnitType" json:"unit,omitempty"`                            // 数据单位 (必填)
	Vendor                string                 `protobuf:"bytes,12,opt,name=vendor,proto3" json:"vendor,omitempty"`                                                  // 云供应商 (必填)
	Region                string                 `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`                                                  // 区域 (必填)
	Tags                  map[string]string      `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FaststorEssentialType FaststorEssentialType  `protobuf:"varint,15,opt,name=faststor_essential_type,json=faststorEssentialType,proto3,enum=billing.v2.FaststorEssentialType" json:"faststor_essential_type,omitempty"` //基础版  高性能版 (必填)
	IsSystemDisk          bool                   `protobuf:"varint,16,opt,name=is_system_disk,json=isSystemDisk,proto3" json:"is_system_disk,omitempty"`                                                                  // 是否是系统盘 (必填)
}

func (x *FaststorEssentialStorage) Reset() {
	*x = FaststorEssentialStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaststorEssentialStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaststorEssentialStorage) ProtoMessage() {}

func (x *FaststorEssentialStorage) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaststorEssentialStorage.ProtoReflect.Descriptor instead.
func (*FaststorEssentialStorage) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{4}
}

func (x *FaststorEssentialStorage) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FaststorEssentialStorage) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *FaststorEssentialStorage) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *FaststorEssentialStorage) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *FaststorEssentialStorage) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *FaststorEssentialStorage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FaststorEssentialStorage) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *FaststorEssentialStorage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FaststorEssentialStorage) GetCloudAccount() string {
	if x != nil {
		return x.CloudAccount
	}
	return ""
}

func (x *FaststorEssentialStorage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FaststorEssentialStorage) GetUnit() UnitType {
	if x != nil {
		return x.Unit
	}
	return UnitType_UNIT_TYPE_INVALID
}

func (x *FaststorEssentialStorage) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *FaststorEssentialStorage) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *FaststorEssentialStorage) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FaststorEssentialStorage) GetFaststorEssentialType() FaststorEssentialType {
	if x != nil {
		return x.FaststorEssentialType
	}
	return FaststorEssentialType_FASTSTOR_ESSENTIAL_TYPE_INVALID
}

func (x *FaststorEssentialStorage) GetIsSystemDisk() bool {
	if x != nil {
		return x.IsSystemDisk
	}
	return false
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	EventType    EventType              `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=billing.v2.EventType" json:"event_type,omitempty"`
	ImageId      string                 `protobuf:"bytes,3,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`                // cs,镜像id
	UserId       int32                  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // global,用户id
	TenantId     int64                  `protobuf:"varint,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`            // global,租户id
	Name         string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                     // global,镜像名称
	Platform     string                 `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`                             // global,镜像系统
	CloudAccount string                 `protobuf:"bytes,8,opt,name=cloud_account,json=cloudAccount,proto3" json:"cloud_account,omitempty"` // global,云账户
	Size         int64                  `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`                                    // cs,镜像大小
	Unit         string                 `protobuf:"bytes,10,opt,name=unit,proto3" json:"unit,omitempty"`                                    // cs,镜像单位
	Vendor       string                 `protobuf:"bytes,11,opt,name=vendor,proto3" json:"vendor,omitempty"`                                // global,云供应商
	Region       string                 `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`                                // global,区域
	Tags         map[string]string      `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{5}
}

func (x *Image) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Image) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_INVALID
}

func (x *Image) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *Image) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Image) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Image) GetCloudAccount() string {
	if x != nil {
		return x.CloudAccount
	}
	return ""
}

func (x *Image) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Image) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Image) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Image) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Image) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`    // 传输开始时间
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`          // 传输结束时间
	TransferId string                 `protobuf:"bytes,4,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"` // 传输id
	UserId     int32                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            // 用户id
	TenantId   int64                  `protobuf:"varint,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`      // 租户id
	Type       string                 `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`                               // 传输类别 download,cross_region
	Name       string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`                               // 文件名称
	From       string                 `protobuf:"bytes,9,opt,name=from,proto3" json:"from,omitempty"`                               // 来源路径
	To         string                 `protobuf:"bytes,10,opt,name=to,proto3" json:"to,omitempty"`                                  // 目标路径
	Size       int64                  `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`                             // 流量大小
	Unit       string                 `protobuf:"bytes,12,opt,name=unit,proto3" json:"unit,omitempty"`                              // 流量单位
	Vendor     string                 `protobuf:"bytes,13,opt,name=vendor,proto3" json:"vendor,omitempty"`                          // 云供应商
	Region     string                 `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty"`                          // 区域
	ClientIp   string                 `protobuf:"bytes,16,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`      // 客户端ip
	Tags       map[string]string      `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{6}
}

func (x *Transfer) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Transfer) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Transfer) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Transfer) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *Transfer) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Transfer) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *Transfer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Transfer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Transfer) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Transfer) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Transfer) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Transfer) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *Transfer) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Efs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`          // 采样开始时间
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                // 采样结束时间
	EfsId        string                 `protobuf:"bytes,4,opt,name=efs_id,json=efsId,proto3" json:"efs_id,omitempty"`                      // efs id
	UserId       int32                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户id
	TenantId     int64                  `protobuf:"varint,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`            // 租户id
	CloudAccount string                 `protobuf:"bytes,7,opt,name=cloud_account,json=cloudAccount,proto3" json:"cloud_account,omitempty"` // 云账户
	Size         int64                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`                                    // 采样峰值大小
	Unit         string                 `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`                                     // 峰值单位
	Vendor       string                 `protobuf:"bytes,10,opt,name=vendor,proto3" json:"vendor,omitempty"`                                // 云供应商
	Region       string                 `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`                                // 区域
	Tags         map[string]string      `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Efs) Reset() {
	*x = Efs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Efs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Efs) ProtoMessage() {}

func (x *Efs) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Efs.ProtoReflect.Descriptor instead.
func (*Efs) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{7}
}

func (x *Efs) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Efs) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Efs) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Efs) GetEfsId() string {
	if x != nil {
		return x.EfsId
	}
	return ""
}

func (x *Efs) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Efs) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *Efs) GetCloudAccount() string {
	if x != nil {
		return x.CloudAccount
	}
	return ""
}

func (x *Efs) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Efs) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Efs) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Efs) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Efs) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                            // 存储更新时间
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 采样开始时间
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 采样结束时间
	TenantId  int64                  `protobuf:"varint,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`   // 租户id
	Size      int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                           // 采样峰值大小
	Unit      string                 `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`                            // 峰值单位
	Tags      map[string]string      `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Backup) Reset() {
	*x = Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{8}
}

func (x *Backup) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Backup) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Backup) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Backup) GetTenantId() int64 {
	if x != nil {
		return x.TenantId
	}
	return 0
}

func (x *Backup) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Backup) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Backup) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PutEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32  `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PutEventResponse) Reset() {
	*x = PutEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventResponse) ProtoMessage() {}

func (x *PutEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v2_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventResponse.ProtoReflect.Descriptor instead.
func (*PutEventResponse) Descriptor() ([]byte, []int) {
	return file_v2_event_proto_rawDescGZIP(), []int{9}
}

func (x *PutEventResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PutEventResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_v2_event_proto protoreflect.FileDescriptor

var file_v2_event_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x04,
	0x0a, 0x0f, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6d, 0x52, 0x02, 0x76, 0x6d,
	0x12, 0x2d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x65, 0x66,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x66, 0x73, 0x52, 0x03, 0x65, 0x66, 0x73, 0x12, 0x53, 0x0a,
	0x15, 0x66, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x76, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x6d, 0x52, 0x13, 0x66,
	0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x6d, 0x12, 0x62, 0x0a, 0x1a, 0x66, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x65,
	0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x18, 0x66, 0x61,
	0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x22, 0xf9, 0x05, 0x0a, 0x02, 0x56, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x63, 0x70, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x63,
	0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x67, 0x70, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x69, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x6e, 0x69, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x65, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x69, 0x70, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xff,
	0x03, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8a, 0x06, 0x0a, 0x13, 0x46, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x73, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x63, 0x70, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x63, 0x70,
	0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x67, 0x70, 0x75, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x59, 0x0a, 0x17, 0x66, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x65,
	0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x66, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72,
	0x45, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x6b, 0x75, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x05,
	0x0a, 0x18, 0x46, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73,
	0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x59,
	0x0a, 0x17, 0x66, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x73, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x73,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x15, 0x66, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x03, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb1, 0x04, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x03, 0x0a, 0x03, 0x45, 0x66, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x65, 0x66, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x66, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x66, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xda, 0x02, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a,
	0x10, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0x83, 0x01, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x04, 0x2a,
	0xa9, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x46, 0x53, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x53, 0x53, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x53,
	0x53, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10,
	0x07, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x08, 0x2a, 0x81, 0x01, 0x0a, 0x08,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4b, 0x49, 0x42, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x42, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x42, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x42, 0x10, 0x05, 0x2a,
	0x8d, 0x01, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x45, 0x73, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x41, 0x53,
	0x54, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x46, 0x41, 0x53, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x53, 0x53, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x41, 0x53, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x53,
	0x53, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x32,
	0x55, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x9b, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x42, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x2e, 0x66, 0x61, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x61, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x32, 0x3b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x76, 0x32, 0xa2, 0x02, 0x03,
	0x42, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x32,
	0xca, 0x02, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x16,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v2_event_proto_rawDescOnce sync.Once
	file_v2_event_proto_rawDescData = file_v2_event_proto_rawDesc
)

func file_v2_event_proto_rawDescGZIP() []byte {
	file_v2_event_proto_rawDescOnce.Do(func() {
		file_v2_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_v2_event_proto_rawDescData)
	})
	return file_v2_event_proto_rawDescData
}

var file_v2_event_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_v2_event_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_v2_event_proto_goTypes = []interface{}{
	(EventType)(0),                   // 0: billing.v2.EventType
	(ResourceType)(0),                // 1: billing.v2.ResourceType
	(UnitType)(0),                    // 2: billing.v2.UnitType
	(FaststorEssentialType)(0),       // 3: billing.v2.FaststorEssentialType
	(*PutEventRequest)(nil),          // 4: billing.v2.PutEventRequest
	(*Vm)(nil),                       // 5: billing.v2.Vm
	(*Storage)(nil),                  // 6: billing.v2.Storage
	(*FaststorEssentialVm)(nil),      // 7: billing.v2.FaststorEssentialVm
	(*FaststorEssentialStorage)(nil), // 8: billing.v2.FaststorEssentialStorage
	(*Image)(nil),                    // 9: billing.v2.Image
	(*Transfer)(nil),                 // 10: billing.v2.Transfer
	(*Efs)(nil),                      // 11: billing.v2.Efs
	(*Backup)(nil),                   // 12: billing.v2.Backup
	(*PutEventResponse)(nil),         // 13: billing.v2.PutEventResponse
	nil,                              // 14: billing.v2.Vm.TagsEntry
	nil,                              // 15: billing.v2.Storage.TagsEntry
	nil,                              // 16: billing.v2.FaststorEssentialVm.TagsEntry
	nil,                              // 17: billing.v2.FaststorEssentialStorage.TagsEntry
	nil,                              // 18: billing.v2.Image.TagsEntry
	nil,                              // 19: billing.v2.Transfer.TagsEntry
	nil,                              // 20: billing.v2.Efs.TagsEntry
	nil,                              // 21: billing.v2.Backup.TagsEntry
	(*timestamppb.Timestamp)(nil),    // 22: google.protobuf.Timestamp
}
var file_v2_event_proto_depIdxs = []int32{
	1,  // 0: billing.v2.PutEventRequest.resource_type:type_name -> billing.v2.ResourceType
	5,  // 1: billing.v2.PutEventRequest.vm:type_name -> billing.v2.Vm
	6,  // 2: billing.v2.PutEventRequest.storage:type_name -> billing.v2.Storage
	9,  // 3: billing.v2.PutEventRequest.image:type_name -> billing.v2.Image
	10, // 4: billing.v2.PutEventRequest.transfer:type_name -> billing.v2.Transfer
	11, // 5: billing.v2.PutEventRequest.efs:type_name -> billing.v2.Efs
	7,  // 6: billing.v2.PutEventRequest.faststor_essential_vm:type_name -> billing.v2.FaststorEssentialVm
	8,  // 7: billing.v2.PutEventRequest.faststor_essential_storage:type_name -> billing.v2.FaststorEssentialStorage
	12, // 8: billing.v2.PutEventRequest.backup:type_name -> billing.v2.Backup
	22, // 9: billing.v2.Vm.time:type_name -> google.protobuf.Timestamp
	0,  // 10: billing.v2.Vm.event_type:type_name -> billing.v2.EventType
	14, // 11: billing.v2.Vm.tags:type_name -> billing.v2.Vm.TagsEntry
	22, // 12: billing.v2.Storage.time:type_name -> google.protobuf.Timestamp
	0,  // 13: billing.v2.Storage.event_type:type_name -> billing.v2.EventType
	15, // 14: billing.v2.Storage.tags:type_name -> billing.v2.Storage.TagsEntry
	22, // 15: billing.v2.FaststorEssentialVm.time:type_name -> google.protobuf.Timestamp
	0,  // 16: billing.v2.FaststorEssentialVm.event_type:type_name -> billing.v2.EventType
	16, // 17: billing.v2.FaststorEssentialVm.tags:type_name -> billing.v2.FaststorEssentialVm.TagsEntry
	3,  // 18: billing.v2.FaststorEssentialVm.faststor_essential_type:type_name -> billing.v2.FaststorEssentialType
	22, // 19: billing.v2.FaststorEssentialStorage.time:type_name -> google.protobuf.Timestamp
	0,  // 20: billing.v2.FaststorEssentialStorage.event_type:type_name -> billing.v2.EventType
	2,  // 21: billing.v2.FaststorEssentialStorage.unit:type_name -> billing.v2.UnitType
	17, // 22: billing.v2.FaststorEssentialStorage.tags:type_name -> billing.v2.FaststorEssentialStorage.TagsEntry
	3,  // 23: billing.v2.FaststorEssentialStorage.faststor_essential_type:type_name -> billing.v2.FaststorEssentialType
	22, // 24: billing.v2.Image.time:type_name -> google.protobuf.Timestamp
	0,  // 25: billing.v2.Image.event_type:type_name -> billing.v2.EventType
	18, // 26: billing.v2.Image.tags:type_name -> billing.v2.Image.TagsEntry
	22, // 27: billing.v2.Transfer.time:type_name -> google.protobuf.Timestamp
	22, // 28: billing.v2.Transfer.start_time:type_name -> google.protobuf.Timestamp
	22, // 29: billing.v2.Transfer.end_time:type_name -> google.protobuf.Timestamp
	19, // 30: billing.v2.Transfer.tags:type_name -> billing.v2.Transfer.TagsEntry
	22, // 31: billing.v2.Efs.time:type_name -> google.protobuf.Timestamp
	22, // 32: billing.v2.Efs.start_time:type_name -> google.protobuf.Timestamp
	22, // 33: billing.v2.Efs.end_time:type_name -> google.protobuf.Timestamp
	20, // 34: billing.v2.Efs.tags:type_name -> billing.v2.Efs.TagsEntry
	22, // 35: billing.v2.Backup.time:type_name -> google.protobuf.Timestamp
	22, // 36: billing.v2.Backup.start_time:type_name -> google.protobuf.Timestamp
	22, // 37: billing.v2.Backup.end_time:type_name -> google.protobuf.Timestamp
	21, // 38: billing.v2.Backup.tags:type_name -> billing.v2.Backup.TagsEntry
	4,  // 39: billing.v2.EventService.PutEvent:input_type -> billing.v2.PutEventRequest
	13, // 40: billing.v2.EventService.PutEvent:output_type -> billing.v2.PutEventResponse
	40, // [40:41] is the sub-list for method output_type
	39, // [39:40] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_v2_event_proto_init() }
func file_v2_event_proto_init() {
	if File_v2_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v2_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaststorEssentialVm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaststorEssentialStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Efs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_event_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v2_event_proto_goTypes,
		DependencyIndexes: file_v2_event_proto_depIdxs,
		EnumInfos:         file_v2_event_proto_enumTypes,
		MessageInfos:      file_v2_event_proto_msgTypes,
	}.Build()
	File_v2_event_proto = out.File
	file_v2_event_proto_rawDesc = nil
	file_v2_event_proto_goTypes = nil
	file_v2_event_proto_depIdxs = nil
}
